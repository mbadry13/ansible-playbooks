---
- name: Playbook to revert Esxi VMs to their snapshots and reset the UUID of the VM
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Generate New UUID for the VM LAB-HELK
      shell:  uuidgen | perl -ne '{ s/-//g; s/(.{2})/\1 /g; substr($_,23,1,"-"); print ; }' > /tmp/LAB-HELK.txt
    - name: Generate New UUID for the VM LAB-HIVE
      shell:  uuidgen | perl -ne '{ s/-//g; s/(.{2})/\1 /g; substr($_,23,1,"-"); print ; }' > /tmp/LAB-HIVE.txt
    - name: Generate New UUID for the VM LAB-CORT
      shell:  uuidgen | perl -ne '{ s/-//g; s/(.{2})/\1 /g; substr($_,23,1,"-"); print ; }' > /tmp/LAB-CORT.txt
    - name: Generate New UUID for the VM LAB-MISP
      shell:  uuidgen | perl -ne '{ s/-//g; s/(.{2})/\1 /g; substr($_,23,1,"-"); print ; }' > /tmp/LAB-MISP.txt
    - name: Generate New UUID for the VM LAB-CL1
      shell:  uuidgen | perl -ne '{ s/-//g; s/(.{2})/\1 /g; substr($_,23,1,"-"); print ; }' > /tmp/LAB-CL1.txt
    - name: Generate New UUID for the VM LAB-WEB
      shell:  uuidgen | perl -ne '{ s/-//g; s/(.{2})/\1 /g; substr($_,23,1,"-"); print ; }' > /tmp/LAB-WEB.txt
    - name: Generate New UUID for the VM LAB-DB
      shell:  uuidgen | perl -ne '{ s/-//g; s/(.{2})/\1 /g; substr($_,23,1,"-"); print ; }' > /tmp/LAB-DB.txt
    - name: Generate New UUID for the VM LAB-EXCH
      shell:  uuidgen | perl -ne '{ s/-//g; s/(.{2})/\1 /g; substr($_,23,1,"-"); print ; }' > /tmp/LAB-EXCH.txt
    - name: Generate New UUID for the VM LAB-LAB-CL2
      shell:  uuidgen | perl -ne '{ s/-//g; s/(.{2})/\1 /g; substr($_,23,1,"-"); print ; }' > /tmp/LAB-CL2.txt
    - name: Generate New UUID for the VM LAB-WAPP
      shell:  uuidgen | perl -ne '{ s/-//g; s/(.{2})/\1 /g; substr($_,23,1,"-"); print ; }' > /tmp/LAB-WAPP.txt
    - name: Generate New UUID for the VM LAB-AD1
      shell:  uuidgen | perl -ne '{ s/-//g; s/(.{2})/\1 /g; substr($_,23,1,"-"); print ; }' > /tmp/LAB-AD1.txt
    - name: Generate New UUID for the VM LAB-AD2
      shell:  uuidgen | perl -ne '{ s/-//g; s/(.{2})/\1 /g; substr($_,23,1,"-"); print ; }' > /tmp/LAB-AD2.txt
    - name: Generate New UUID for the VM LAB-DFW
      shell:  uuidgen | perl -ne '{ s/-//g; s/(.{2})/\1 /g; substr($_,23,1,"-"); print ; }' > /tmp/LAB-DFW.txt
    - name: Generate New UUID for the VM LAB-RFW
      shell:  uuidgen | perl -ne '{ s/-//g; s/(.{2})/\1 /g; substr($_,23,1,"-"); print ; }' > /tmp/LAB-RFW.txt
    - name: Generate New UUID for the VM LAB-EDR
      shell:  uuidgen | perl -ne '{ s/-//g; s/(.{2})/\1 /g; substr($_,23,1,"-"); print ; }' > /tmp/LAB-EDR.txt
    - name: Generate New UUID for the VM LAB-DC-FW
      shell:  uuidgen | perl -ne '{ s/-//g; s/(.{2})/\1 /g; substr($_,23,1,"-"); print ; }' > /tmp/LAB-DC-FW.txt
    - name: Generate New UUID for the VM LAB-EX-FW
      shell:  uuidgen | perl -ne '{ s/-//g; s/(.{2})/\1 /g; substr($_,23,1,"-"); print ; }' > /tmp/LAB-EX-FW.txt

- name: Running the original playbook on the esxi host
  hosts: 192.168.18.24
  gather_facts: false
  vars:
    LAB-HELK_uuid_digits: "{{ lookup('file', '/tmp/LAB-HELK.txt') | regex_replace('\n', '') }}"
    LAB-HELK_uuid: $(vim-cmd vmsvc/getallvms | grep LAB-HELK | awk '{print $1}')
    LAB-HIVE_uuid_digits: "{{ lookup('file', '/tmp/LAB-HIVE.txt') | regex_replace('\n', '') }}"
    LAB-HIVE_uuid: $(vim-cmd vmsvc/getallvms | grep LAB-HIVE | awk '{print $1}')
    LAB-CORT_uuid_digits: "{{ lookup('file', '/tmp/LAB-CORT.txt') | regex_replace('\n', '') }}"
    LAB-CORT_uuid: $(vim-cmd vmsvc/getallvms | grep LAB-CORT | awk '{print $1}')
    LAB-MISP_uuid_digits: "{{ lookup('file', '/tmp/LAB-MISP.txt') | regex_replace('\n', '') }}"
    LAB-MISP_uuid: $(vim-cmd vmsvc/getallvms | grep LAB-MISP | awk '{print $1}')
    LAB-CL1_uuid_digits: "{{ lookup('file', '/tmp/LAB-CL1.txt') | regex_replace('\n', '') }}"
    LAB-CL1_uuid: $(vim-cmd vmsvc/getallvms | grep LAB-CL1 | awk '{print $1}')
    LAB-WEB_uuid_digits: "{{ lookup('file', '/tmp/LAB-WEB.txt') | regex_replace('\n', '') }}"
    LAB-WEB_uuid: $(vim-cmd vmsvc/getallvms | grep LAB-WEB | awk '{print $1}')
    LAB-DB_uuid_digits: "{{ lookup('file', '/tmp/LAB-DB.txt') | regex_replace('\n', '') }}"
    LAB-DB_uuid: $(vim-cmd vmsvc/getallvms | grep LAB-DB | awk '{print $1}')
    LAB-EXCH_uuid_digits: "{{ lookup('file', '/tmp/LAB-EXCH.txt') | regex_replace('\n', '') }}"
    LAB-EXCH_uuid: $(vim-cmd vmsvc/getallvms | grep LAB-EXCH | awk '{print $1}')
    LAB-CL2_uuid_digits: "{{ lookup('file', '/tmp/LAB-CL2.txt') | regex_replace('\n', '') }}"
    LAB-CL2_uuid: $(vim-cmd vmsvc/getallvms | grep LAB-CL2 | awk '{print $1}')
    LAB-WAPP_uuid_digits: "{{ lookup('file', '/tmp/LAB-WAPP.txt') | regex_replace('\n', '') }}"
    LAB-WAPP_uuid: $(vim-cmd vmsvc/getallvms | grep LAB-WAPP | awk '{print $1}')
    LAB-AD1_uuid_digits: "{{ lookup('file', '/tmp/LAB-AD1.txt') | regex_replace('\n', '') }}"
    LAB-AD1_uuid: $(vim-cmd vmsvc/getallvms | grep LAB-AD1 | awk '{print $1}')
    Jumping_uuid_digits: "{{ lookup('file', '/tmp/Jumping.txt') | regex_replace('\n', '') }}"
    Jumping_uuid: $(vim-cmd vmsvc/getallvms | grep Jumping | awk '{print $1}')
    LAB-AD2_uuid_digits: "{{ lookup('file', '/tmp/LAB-AD2.txt') | regex_replace('\n', '') }}"
    LAB-AD2_uuid: $(vim-cmd vmsvc/getallvms | grep LAB-AD2 | awk '{print $1}')
    LAB-DFW_uuid_digits: "{{ lookup('file', '/tmp/LAB-DFW.txt') | regex_replace('\n', '') }}"
    LAB-DFW_uuid: $(vim-cmd vmsvc/getallvms | grep LAB-DFW | awk '{print $1}')
    LAB-RFW_uuid_digits: "{{ lookup('file', '/tmp/LAB-RFW.txt') | regex_replace('\n', '') }}"
    LAB-RFW_uuid: $(vim-cmd vmsvc/getallvms | grep LAB-RFW | awk '{print $1}')
    LAB-EDR_uuid_digits: "{{ lookup('file', '/tmp/LAB-EDR.txt') | regex_replace('\n', '') }}"
    LAB-EDR_uuid: $(vim-cmd vmsvc/getallvms | grep LAB-EDR | awk '{print $1}')
    LAB-DC-FW_uuid_digits: "{{ lookup('file', '/tmp/LAB-DC-FW.txt') | regex_replace('\n', '') }}"
    LAB-DC-FW_uuid: $(vim-cmd vmsvc/getallvms | grep LAB-DC-FW | awk '{print $1}')
    LAB-EX-FW_uuid_digits: "{{ lookup('file', '/tmp/LAB-EX-FW.txt') | regex_replace('\n', '') }}"
    LAB-EX-FW_uuid: $(vim-cmd vmsvc/getallvms | grep LAB-EX-FW | awk '{print $1}')
  vars_prompt:
    - name: PODMAN
      prompt: "Do you want to revert and reset PODMAN VM? (yes/no)"
      private: no
    - name: Jumping
      prompt: "Do you want to revert and reset Jumping VM? (yes/no)"
      private: no

  tasks:

    - name: Powering off the PODMAN VM
      shell: vim-cmd vmsvc/power.off $(vim-cmd vmsvc/getallvms | grep PODMAN | awk '{print $1}')
      async: 30
      poll: 0
      when: PODMAN.lower() == 'yes'

    - name: backing up the VMX file for PODMAN VM
      shell: cp /vmfs/volumes/datastore1/PODMAN/PODMAN.vmx /backup
      when: PODMAN.lower() == 'yes'

    - name: Revert PODMAN VM SNAPSHOT
      shell: "/bin/vim-cmd vmsvc/snapshot.revert {{podman_uuid}} 1 VIMCMD_ROOT_SESSION: root:P@ssw0rd@localhost"
      when: PODMAN.lower() == 'yes'


    - name: delete the uuid from the vmx file for PODMAN VM
      shell: sed -i '/uuid.location/d' /vmfs/volumes/datastore1/PODMAN/PODMAN.vmx
      when: PODMAN.lower() == 'yes'


    - name: delete the bios uuid for PODMAN VMx file
      shell: sed -i '/uuid.bios/d' /vmfs/volumes/datastore1/PODMAN/PODMAN.vmx  
      when: PODMAN.lower() == 'yes'


    - name: copy the uuid of the PODMAN VM to the ESXI TMP Directory
      copy:
        src: /tmp/PODMAN.txt
        dest: /tmp/PODMAN.txt
      when: PODMAN.lower() == 'yes'


    - name: update uuid BIOS  on the VMX file for the PODMAN VM
      lineinfile:
        path: /vmfs/volumes/datastore1/PODMAN/PODMAN.vmx
        line: 'uuid.bios = "{{ podman_uuid_digits }}"'
      when: PODMAN.lower() == 'yes'


    - name: update uuid Location for PODMAN VM
      lineinfile:
        path: /vmfs/volumes/datastore1/PODMAN/PODMAN.vmx
        line: 'uuid.location = "{{ podman_uuid_digits }}"'
      when: PODMAN.lower() == 'yes'


    - name: unregister the PODMAN VM
      shell: vim-cmd vmsvc/unregister $(vim-cmd vmsvc/getallvms | grep PODMAN | awk '{print $1}')
      when: PODMAN.lower() == 'yes'

    - name: register the PODMAN vm
      shell: "vim-cmd solo/registervm /vmfs/volumes/datastore1/PODMAN/PODMAN.vmx"
      when: PODMAN.lower() == 'yes'


    - name: Power On PODMAN VM
      shell: vim-cmd vmsvc/power.on $(vim-cmd vmsvc/getallvms | grep PODMAN | awk '{print $1}')
      async: 30
      poll: 0
      when: PODMAN.lower() == 'yes'


    - name: pause
      pause:
        seconds: 30
      when: PODMAN.lower() == 'yes'


    - name: Get the Pending powering on question ID
      shell: vim-cmd vmsvc/message  $(vim-cmd vmsvc/getallvms | grep PODMAN | awk '{print $1}')  | awk 'NR==1 { gsub(/[^0-9]/, ""); print }'
      register: message
      when: PODMAN.lower() == 'yes'


    - name:
      debug:
        var: message.stdout
      when: PODMAN.lower() == 'yes'


    - name: pause for powering on
      pause:
        seconds: 30
      when: PODMAN.lower() == 'yes'

    - name: Get the PODMAN VM New ID
      shell: vim-cmd vmsvc/getallvms | grep PODMAN | awk '{print $1}'
      register: vm_id
      when: PODMAN.lower() == 'yes'


    - name: answer the question for PODMAN VM to be powerd on
      shell: "vim-cmd vmsvc/message {{ vm_id.stdout }} {{ message.stdout }} 1 "
      when: PODMAN.lower() == 'yes'



    - name: Powering off the Jumping VM
      shell: vim-cmd vmsvc/power.off $(vim-cmd vmsvc/getallvms | grep Jumping | awk '{print $1}')
      async: 30
      poll: 0
      when: Jumping.lower() == 'yes'

    - name: backing up the VMX file for Jumping VM
      shell: cp /vmfs/volumes/datastore1/Jumping/Jumping.vmx /backup
      when: Jumping.lower() == 'yes'

    - name: Revert Jumping VM SNAPSHOT
      shell: "/bin/vim-cmd vmsvc/snapshot.revert {{Jumping_uuid}} 1 VIMCMD_ROOT_SESSION: root:P@ssw0rd@localhost"
      when: Jumping.lower() == 'yes'


    - name: delete the uuid from the vmx file for Jumping VM
      shell: sed -i '/uuid.location/d' /vmfs/volumes/datastore1/Jumping/Jumping.vmx
      when: Jumping.lower() == 'yes'


    - name: delete the bios uuid for Jumping VMx file
      shell: sed -i '/uuid.bios/d' /vmfs/volumes/datastore1/Jumping/Jumping.vmx
      when: Jumping.lower() == 'yes'


    - name: copy the uuid of the Jumping VM to the ESXI TMP Directory
      copy:
        src: /tmp/Jumping.txt
        dest: /tmp/Jumping.txt
      when: Jumping.lower() == 'yes'


    - name: update uuid BIOS  on the VMX file for the Jumping VM
      lineinfile:
        path: /vmfs/volumes/datastore1/Jumping/Jumping.vmx
        line: 'uuid.bios = "{{ Jumping_uuid_digits }}"'
      when: Jumping.lower() == 'yes'


    - name: update uuid Location for Jumping VM
      lineinfile:
        path: /vmfs/volumes/datastore1/Jumping/Jumping.vmx
        line: 'uuid.location = "{{ Jumping_uuid_digits }}"'
      when: Jumping.lower() == 'yes'


    - name: unregister the Jumping VM
      shell: vim-cmd vmsvc/unregister $(vim-cmd vmsvc/getallvms | grep Jumping | awk '{print $1}')
      when: Jumping.lower() == 'yes'

    - name: register the Jumping vm
      shell: "vim-cmd solo/registervm /vmfs/volumes/datastore1/Jumping/Jumping.vmx"
      when: Jumping.lower() == 'yes'


    - name: Power On Jumping VM
      shell: vim-cmd vmsvc/power.on $(vim-cmd vmsvc/getallvms | grep Jumping | awk '{print $1}')
      async: 30
      poll: 0
      when: Jumping.lower() == 'yes'


    - name: pause
      pause:
        seconds: 30
      when: Jumping.lower() == 'yes'


    - name: Get the Pending powering on question ID
      shell: vim-cmd vmsvc/message  $(vim-cmd vmsvc/getallvms | grep Jumping | awk '{print $1}')  | awk 'NR==1 { gsub(/[^0-9]/, ""); print }'
      register: message
      when: Jumping.lower() == 'yes'


    - name:
      debug:
        var: message.stdout
      when: Jumping.lower() == 'yes'


    - name: pause for powering on
      pause:
        seconds: 30
      when: Jumping.lower() == 'yes'

    - name: Get the Jumping VM New ID
      shell: vim-cmd vmsvc/getallvms | grep Jumping | awk '{print $1}'
      register: vm_id
      when: Jumping.lower() == 'yes'


    - name: answer the question for Jumping VM to be powerd on
      shell: "vim-cmd vmsvc/message {{ vm_id.stdout }} {{ message.stdout }} 1 "
      when: Jumping.lower() == 'yes'

                                                                                                                        
    
